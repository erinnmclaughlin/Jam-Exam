// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Server.Data;

namespace Server.Data.Migrations
{
    [DbContext(typeof(JamContext))]
    [Migration("20210920224925_AddGameQuestionsTable")]
    partial class AddGameQuestionsTable
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.9")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Server.Data.Entities.Game", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("EndedOn")
                        .HasColumnType("datetime2");

                    b.Property<double?>("FinalScore")
                        .HasColumnType("float");

                    b.Property<Guid>("GenreId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("MaxAnswerTime")
                        .HasColumnType("int");

                    b.Property<int>("NumberOfQuestions")
                        .HasColumnType("int");

                    b.Property<DateTime>("StartedOn")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("GenreId");

                    b.HasIndex("UserId");

                    b.ToTable("Games");
                });

            modelBuilder.Entity("Server.Data.Entities.GameAnswer", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("GameQuestionId")
                        .HasColumnType("int");

                    b.Property<Guid?>("GameQuestionId1")
                        .HasColumnType("uniqueidentifier");

                    b.Property<double?>("GuessedIn")
                        .HasColumnType("float");

                    b.Property<string>("SpotifyGuessId")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("GameQuestionId1");

                    b.ToTable("GameAnswers");
                });

            modelBuilder.Entity("Server.Data.Entities.GameQuestion", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("GameId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("SpotifyArtistId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SpotifyTrackId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("GameId");

                    b.ToTable("GameQuestions");
                });

            modelBuilder.Entity("Server.Data.Entities.Genre", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SpotifyPlaylistId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Genres");

                    b.HasData(
                        new
                        {
                            Id = new Guid("b0aaca00-b148-4f89-8931-dc0167b3d8f2"),
                            Name = "Classic Rock",
                            SpotifyPlaylistId = "37i9dQZF1DWXRqgorJj26U"
                        },
                        new
                        {
                            Id = new Guid("24473c5d-2722-4d1b-a006-afbd56d5573f"),
                            Name = "Indie",
                            SpotifyPlaylistId = "37i9dQZF1DX2Nc3B70tvx0"
                        },
                        new
                        {
                            Id = new Guid("6144c08e-00b9-45d0-8fa2-8ba3e1505d9c"),
                            Name = "Pop",
                            SpotifyPlaylistId = "37i9dQZF1DXcBWIGoYBM5M"
                        },
                        new
                        {
                            Id = new Guid("7c1aa3ec-36d3-45e7-8180-2813aa294241"),
                            Name = "Hip Hop",
                            SpotifyPlaylistId = "37i9dQZF1DX0XUsuxWHRQd"
                        },
                        new
                        {
                            Id = new Guid("239dd819-bd02-43e1-bec0-6a7c0b0d1335"),
                            Name = "Country",
                            SpotifyPlaylistId = "37i9dQZF1DX1lVhptIYRda"
                        },
                        new
                        {
                            Id = new Guid("3796e900-4995-424f-a3fd-71aecefb38a8"),
                            Name = "1960s",
                            SpotifyPlaylistId = "37i9dQZF1DWWzBc3TOlaAV"
                        },
                        new
                        {
                            Id = new Guid("075525e1-99e1-4971-a83d-6e9bc26100db"),
                            Name = "1970s",
                            SpotifyPlaylistId = "37i9dQZF1DWTJ7xPn4vNaz"
                        },
                        new
                        {
                            Id = new Guid("511e3718-0383-43cc-8eee-c0fc0423df2f"),
                            Name = "1980s",
                            SpotifyPlaylistId = "37i9dQZF1DX4UtSsGT1Sbe"
                        },
                        new
                        {
                            Id = new Guid("0ccf0797-aeb4-4497-b309-ae21b17f7df4"),
                            Name = "1990s",
                            SpotifyPlaylistId = "37i9dQZF1DXbTxeAdrVG2l"
                        },
                        new
                        {
                            Id = new Guid("3a3abb17-1ccc-475e-a3ca-3e4a5eee7e78"),
                            Name = "2000s",
                            SpotifyPlaylistId = "37i9dQZF1DX4o1oenSJRJd"
                        });
                });

            modelBuilder.Entity("Server.Data.Entities.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("DisplayName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SpotifyUserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("Server.Data.Entities.UserToken", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("ExpiresOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("RefreshToken")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("UserTokens");
                });

            modelBuilder.Entity("Server.Data.Entities.Game", b =>
                {
                    b.HasOne("Server.Data.Entities.Genre", "Genre")
                        .WithMany()
                        .HasForeignKey("GenreId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Server.Data.Entities.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Genre");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Server.Data.Entities.GameAnswer", b =>
                {
                    b.HasOne("Server.Data.Entities.GameQuestion", "GameQuestion")
                        .WithMany()
                        .HasForeignKey("GameQuestionId1");

                    b.Navigation("GameQuestion");
                });

            modelBuilder.Entity("Server.Data.Entities.GameQuestion", b =>
                {
                    b.HasOne("Server.Data.Entities.Game", "Game")
                        .WithMany()
                        .HasForeignKey("GameId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Game");
                });

            modelBuilder.Entity("Server.Data.Entities.UserToken", b =>
                {
                    b.HasOne("Server.Data.Entities.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });
#pragma warning restore 612, 618
        }
    }
}
