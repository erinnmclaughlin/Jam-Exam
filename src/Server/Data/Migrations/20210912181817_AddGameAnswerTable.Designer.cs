// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Server.Data;

namespace Server.Data.Migrations
{
    [DbContext(typeof(JamContext))]
    [Migration("20210912181817_AddGameAnswerTable")]
    partial class AddGameAnswerTable
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.9")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Server.Data.Entities.Game", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("EndedOn")
                        .HasColumnType("datetime2");

                    b.Property<double?>("FinalScore")
                        .HasColumnType("float");

                    b.Property<Guid>("GenreId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("MaxAnswerTime")
                        .HasColumnType("int");

                    b.Property<int>("NumberOfQuestions")
                        .HasColumnType("int");

                    b.Property<DateTime>("StartedOn")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("GenreId");

                    b.HasIndex("UserId");

                    b.ToTable("Games");
                });

            modelBuilder.Entity("Server.Data.Entities.GameAnswer", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("GameId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("SpotifyArtistId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SpotifyGuessId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SpotifyTrackId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<double?>("TimeGuessed")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.HasIndex("GameId");

                    b.ToTable("GameAnswers");
                });

            modelBuilder.Entity("Server.Data.Entities.Genre", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SpotifyPlaylistId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Genres");

                    b.HasData(
                        new
                        {
                            Id = new Guid("c142c64c-618a-4f86-a304-19f781ee0da7"),
                            Name = "Classic Rock",
                            SpotifyPlaylistId = "37i9dQZF1DWXRqgorJj26U"
                        },
                        new
                        {
                            Id = new Guid("95c26c11-7bd5-4928-b36e-d545d1ab0c9d"),
                            Name = "Indie",
                            SpotifyPlaylistId = "37i9dQZF1DX2Nc3B70tvx0"
                        },
                        new
                        {
                            Id = new Guid("6e881121-e92f-44ef-8237-a39c687b29d2"),
                            Name = "Pop",
                            SpotifyPlaylistId = "37i9dQZF1DXcBWIGoYBM5M"
                        },
                        new
                        {
                            Id = new Guid("abc31289-adfc-4d3d-a707-277d2717a1ab"),
                            Name = "Hip Hop",
                            SpotifyPlaylistId = "37i9dQZF1DX0XUsuxWHRQd"
                        },
                        new
                        {
                            Id = new Guid("2297f066-900f-4f89-bcb4-353313c21f82"),
                            Name = "Country",
                            SpotifyPlaylistId = "37i9dQZF1DX1lVhptIYRda"
                        },
                        new
                        {
                            Id = new Guid("569b1118-7a45-4581-a042-4cd69c87d082"),
                            Name = "1960s",
                            SpotifyPlaylistId = "37i9dQZF1DWWzBc3TOlaAV"
                        },
                        new
                        {
                            Id = new Guid("3bc1fc3c-e265-4c49-b1b7-fff6502dcd38"),
                            Name = "1970s",
                            SpotifyPlaylistId = "37i9dQZF1DWTJ7xPn4vNaz"
                        },
                        new
                        {
                            Id = new Guid("cb40d10f-f83a-483d-ba6e-fc02a1ae74bd"),
                            Name = "1980s",
                            SpotifyPlaylistId = "37i9dQZF1DX4UtSsGT1Sbe"
                        },
                        new
                        {
                            Id = new Guid("82ece384-6b20-4f82-9c47-839efd95b500"),
                            Name = "1990s",
                            SpotifyPlaylistId = "37i9dQZF1DXbTxeAdrVG2l"
                        },
                        new
                        {
                            Id = new Guid("b75b7270-2e26-46a9-b622-81b0804c9f53"),
                            Name = "2000s",
                            SpotifyPlaylistId = "37i9dQZF1DX4o1oenSJRJd"
                        });
                });

            modelBuilder.Entity("Server.Data.Entities.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("DisplayName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SpotifyUserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("Server.Data.Entities.UserToken", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("ExpiresOn")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("UserTokens");
                });

            modelBuilder.Entity("Server.Data.Entities.Game", b =>
                {
                    b.HasOne("Server.Data.Entities.Genre", "Genre")
                        .WithMany()
                        .HasForeignKey("GenreId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Server.Data.Entities.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Genre");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Server.Data.Entities.GameAnswer", b =>
                {
                    b.HasOne("Server.Data.Entities.Game", "Game")
                        .WithMany()
                        .HasForeignKey("GameId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Game");
                });

            modelBuilder.Entity("Server.Data.Entities.UserToken", b =>
                {
                    b.HasOne("Server.Data.Entities.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });
#pragma warning restore 612, 618
        }
    }
}
